#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef SYNERISESDK_SWIFT_H
#define SYNERISESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SyneriseSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS_NAMED("GeneralSettings")
@interface SNRGeneralSettings : NSObject
/// This parameter specifies if all of the SDK functionalities are enabled.
/// The default value is true.
@property (nonatomic) BOOL enabled;
/// This parameter identifies the app group that your app and its extensions belong to.
/// This property is required to allow the SDK to share data with the Host App and its extensions.
/// The default value is nil.
@property (nonatomic, copy) NSString * _Nullable appGroupIdentifier;
/// This parameter identifies the keychain group that your app and its extensions belong to.
/// This property is required to allow the SDK to share sensitive data with the Host App and its extensions.
/// The default value is nil.
@property (nonatomic, copy) NSString * _Nullable keychainGroupIdentifier;
/// This parameter sets a time counting backwards from expiration time, within which an authentication token will be automatically refreshed by the SDK.
/// That minimum value for this parameter is 1800 seconds (30 minutes).
/// The default value is 1800 seconds (30 minutes).
@property (nonatomic) NSTimeInterval minTokenRefreshInterval;
/// This parameter sets an array of SSL pins, where each pin is a base64-encoded SHA-256 hash of a certificate’s SPKI.
/// These SSL pins are used when you use a custom URL for the Synerise API.
/// The default value is an empty array.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable SSLPinningPinset;
/// This parameter specifies the supported algorithms for generating the SSL pins’ certificates.
/// This option is only required for proper SSL Pinning support for system versions before iOS 10.
/// The default value is an array containing the <code>kSNRPublicKeyPinningAlgorithmRsa2048</code> values.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable SSLPinningPublicKeySupportedAlgorithms;
/// This parameter specifies if a session should be destroyed after Profile API key (formerly Client API Key) changes.
/// The default value is true.
@property (nonatomic) BOOL shouldDestroySessionOnApiKeyChange;
/// This parameter specifies the localization of some strings occurring in the SDK.
/// When this option isn’t used, the SDK uses default strings.
/// We recommend updating the property when you change the language in the Host App.
/// The default value is nil.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable localizable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("InAppMessagingSettings")
@interface SNRInAppMessagingSettings : NSObject
/// This parameter specifies if global control groups should be checked immediately after in-app definitions are fetched.
/// The default value is false.
@property (nonatomic) BOOL checkGlobalControlGroupsOnDefinitionsFetch;
/// This parameter sets the maximum interval between automatic In-app definition updates.
/// The minimum value for this parameter is 600 seconds (10 minutes).
/// The default value is 600 seconds (10 minutes).
@property (nonatomic) NSTimeInterval maxDefinitionUpdateIntervalLimit;
/// <ul>
///   <li>
///     This parameter sets the document’s base URL under which a web view will be created to show the in-app message.
///   </li>
///   <li>
///     It specifies the base URL to use for all relative URLs in an in-app message’s creation.
///   </li>
///   <li>
///   </li>
///   <li>
///     The default value is nil.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable contentBaseUrl;
/// This parameter sets a timeout for In-app message rendering.
/// The minimum value for this parameter is 1 second.
/// The default value is 5 seconds.
@property (nonatomic) NSTimeInterval renderingTimeout;
/// This parameter specifies if the SDK should send the <code>inApp.capping</code> event.
/// The default value is true.
@property (nonatomic) BOOL shouldSendInAppCappingEvent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("InjectorSettings")
@interface SNRInjectorSettings : NSObject
/// This parameter specifies if Synerise Mobile Campaigns are processed automatically or not.
/// The default value is false.
@property (nonatomic) BOOL automatic;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NotificationsSettings")
@interface SNRNotificationsSettings : NSObject
/// This parameter specifies if handling notifications by the SDK is enabled.
/// The default value is true.
@property (nonatomic) BOOL enabled;
/// This parameter determines if the SDK displays an additional alert in the application after receiving a notification.
/// The default value is true.
@property (nonatomic) BOOL disableInAppAlerts;
/// This parameter specifies if notifications from Synerise should be encrypted.
/// iOS 10 or newer is required for this option.
/// The default value is false.
@property (nonatomic) BOOL encryption SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SNRTrackerSettings;

SWIFT_CLASS_NAMED("Settings")
@interface SNRSettings : NSObject
/// General settings of the SDK
@property (nonatomic, readonly, strong) SNRGeneralSettings * _Nonnull sdk;
/// Notification settings of the SDK
@property (nonatomic, readonly, strong) SNRNotificationsSettings * _Nonnull notifications;
/// Settings for the Tracker module
@property (nonatomic, readonly, strong) SNRTrackerSettings * _Nonnull tracker;
/// In-App Messaging settings of the SDK
@property (nonatomic, readonly, strong) SNRInAppMessagingSettings * _Nonnull inAppMessaging;
/// Settings for the Injector module
@property (nonatomic, readonly, strong) SNRInjectorSettings * _Nonnull injector;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SNRTrackerAutoTrackMode, "TrackerAutoTrackMode", open) {
/// Auto-Tracking is set to on touch events only.
  SNRTrackerAutoTrackModeEager = 0,
/// Auto-Tracking is set to track screen-visits only.
  SNRTrackerAutoTrackModePlain = 1,
/// Auto-Tracking is set to attached to nearly everything in your app (even to activities and the <code>viewDidAppear:</code> method which records <code>screen.view</code> events).
  SNRTrackerAutoTrackModeFine = 2,
/// Auto-Tracking is disabled.
  SNRTrackerAutoTrackModeDisabled = 3,
};


SWIFT_CLASS_NAMED("TrackerAutoTrackingSettings")
@interface SNRTrackerAutoTrackingSettings : NSObject
/// This parameter specifies if AutoTracking is enabled.
/// The default value is true.
@property (nonatomic) BOOL enabled;
/// This parameter sets the mode of AutoTracking.
/// The default value is <code>SNRTrackerAutoTrackModeDisabled</code>.
@property (nonatomic) enum SNRTrackerAutoTrackMode mode;
/// This parameter sets classes excluded from Auto-Tracking.
@property (nonatomic, copy) NSArray<Class> * _Nonnull excludedClasses;
/// This parameter sets view tags excluded from Auto-Tracking.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull excludedViewTags;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TrackerDeclarativeTrackingSettings")
@interface SNRTrackerDeclarativeTrackingSettings : NSObject
/// This parameter specifies if declarative tracking is enabled.
/// The default value is true.
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TrackerSettings")
@interface SNRTrackerSettings : NSObject
/// Auto-Tracking settings of the Tracker module.
@property (nonatomic, readonly, strong) SNRTrackerAutoTrackingSettings * _Nonnull autoTracking;
/// Declarative-Tracking  settings of the Tracker module.
@property (nonatomic, readonly, strong) SNRTrackerDeclarativeTrackingSettings * _Nonnull tracking;
/// This parameter specifies if events should be sent when server time synchronization has failed.
/// The default value is true (events are sent if synchronization fails).
@property (nonatomic) BOOL isBackendTimeSyncRequired;
/// This parameter sets the minimum number of events in queue required to send them.
/// Adding any event to queue runs auto flush, in which case the SDK attempts to send the queue regardless if the minimum number of events is queued.
/// The maximum value for this parameter is 100.
/// The default value is 10.
@property (nonatomic) NSInteger minBatchSize;
/// This parameter sets the maximum number of events which may be sent in a single batch.
/// The maximum value for this parameter is 100.
/// The default value is 100.
@property (nonatomic) NSInteger maxBatchSize;
/// This parameter sets the time required before the SDK attempts to send the event queue.
/// Provide the timeout in seconds.
/// Adding any event to queue runs auto flush, in which case the SDK attempts to send the queue regardless if the minimum number of events is queued.
/// The minimum value for this parameter is 0.5f.
/// The default value is 5 seconds.
@property (nonatomic) NSTimeInterval autoFlushTimeout;
/// This parameter sets an array of event ‘action’ values which trigger the flush mechanism.
/// The default value is an array of event ‘action’ values. Default array contains only push event’s actions.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull eventsTriggeringFlush;
/// This parameter specifies if sending location events is automatic.
/// The default value is false.
@property (nonatomic) BOOL locationAutomatic;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _SNR_Constants;
@class _SNR_Logger;
@class _SNR_SyneriseFrameworkInfoProvider;
@class _SNR_ClientApplicationInfoProvider;
@class _SNR_DeviceInfoProvider;
@class _SNR_MobileOperatorInfoProvider;
@class _SNR_ImageProvider;
@class _SNR_DispatchUtils;
@class _SNR_DelegateUtils;
@class _SNR_MiscUtils;
@class _SNR_BackgroundTaskManager;

SWIFT_CLASS_NAMED("_SNR")
@interface _SNR : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_Constants) _Nonnull Constants;)
+ (SWIFT_METATYPE(_SNR_Constants) _Nonnull)Constants SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_Logger) _Nonnull Logger;)
+ (SWIFT_METATYPE(_SNR_Logger) _Nonnull)Logger SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_SyneriseFrameworkInfoProvider) _Nonnull SyneriseFrameworkInfoProvider;)
+ (SWIFT_METATYPE(_SNR_SyneriseFrameworkInfoProvider) _Nonnull)SyneriseFrameworkInfoProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_ClientApplicationInfoProvider) _Nonnull ClientApplicationInfoProvider;)
+ (SWIFT_METATYPE(_SNR_ClientApplicationInfoProvider) _Nonnull)ClientApplicationInfoProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_DeviceInfoProvider) _Nonnull DeviceInfoProvider;)
+ (SWIFT_METATYPE(_SNR_DeviceInfoProvider) _Nonnull)DeviceInfoProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_MobileOperatorInfoProvider) _Nonnull MobileOperatorInfoProvider;)
+ (SWIFT_METATYPE(_SNR_MobileOperatorInfoProvider) _Nonnull)MobileOperatorInfoProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) _SNR_ImageProvider * _Nonnull ImageProviderSingleton;)
+ (_SNR_ImageProvider * _Nonnull)ImageProviderSingleton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) _SNR_ImageProvider * _Nonnull ImageProviderNewInstance;)
+ (_SNR_ImageProvider * _Nonnull)ImageProviderNewInstance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_DispatchUtils) _Nonnull DispatchUtils;)
+ (SWIFT_METATYPE(_SNR_DispatchUtils) _Nonnull)DispatchUtils SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_DelegateUtils) _Nonnull DelegateUtils;)
+ (SWIFT_METATYPE(_SNR_DelegateUtils) _Nonnull)DelegateUtils SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(_SNR_MiscUtils) _Nonnull MiscUtils;)
+ (SWIFT_METATYPE(_SNR_MiscUtils) _Nonnull)MiscUtils SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) _SNR_BackgroundTaskManager * _Nonnull BackgroundTaskManagerSingleton SWIFT_AVAILABILITY(ios,introduced=13);)
+ (_SNR_BackgroundTaskManager * _Nonnull)BackgroundTaskManagerSingleton SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SNR_BackgroundTaskManager") SWIFT_AVAILABILITY(ios,introduced=13)
@interface _SNR_BackgroundTaskManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setBackgroundTaskIdentifiers:(NSArray<NSString *> * _Nonnull)identifiers;
- (void)registerMainBackgroundTaskWithHandler:(void (^ _Nonnull)(void))handler;
@end


SWIFT_CLASS_NAMED("_SNR_ClientApplicationInfoProvider")
@interface _SNR_ClientApplicationInfoProvider : NSObject
+ (NSString * _Nullable)applicationName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)applicationType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)applicationVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)build SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)arePushNotificationsEnabled SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SNR_Constants")
@interface _SNR_Constants : NSObject
+ (NSString * _Nonnull)LOCALIZABLE_STRING_KEY_OK SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)LOCALIZABLE_STRING_KEY_CANCEL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Protocol;

SWIFT_CLASS_NAMED("_SNR_DelegateUtils")
@interface _SNR_DelegateUtils : NSObject
+ (BOOL)object:(id _Nullable)object conformsTo:(Protocol * _Nonnull)protocol SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)delegate:(id _Nullable)delegate respondsTo:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SNR_DeviceInfoProvider")
@interface _SNR_DeviceInfoProvider : NSObject
+ (NSString * _Nonnull)deviceID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)deviceModel SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)deviceManufacturer SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)deviceType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)deviceResolution SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)operatingSystem SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)operatingSystemVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)operatingSystemLanguage SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isPhone SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isTablet SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDeviceWithNotch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SNR_DispatchUtils")
@interface _SNR_DispatchUtils : NSObject
+ (void)dispatchSyncBlockOnMainThread:(void (^ _Nonnull)(void))block;
+ (void)dispatchSyncBlockOnMainThread:(void (^ _Nonnull)(void))block ifMetCondition:(BOOL)condition;
+ (void)dispatchSyncBlock:(void (^ _Nonnull)(void))block onQueue:(dispatch_queue_t _Nonnull)queue;
+ (void)dispatchAsyncBlockOnMainThread:(void (^ _Nonnull)(void))block;
+ (void)dispatchAsyncBlockOnMainThread:(void (^ _Nonnull)(void))block ifMetCondition:(BOOL)condition;
+ (void)dispatchAsyncBlockOnMainThread:(void (^ _Nonnull)(void))block withDelay:(NSTimeInterval)delay;
+ (void)dispatchAsyncBlockOnBackgroundThread:(void (^ _Nonnull)(void))block;
+ (void)dispatchAsyncBlockOnBackgroundThread:(void (^ _Nonnull)(void))block ifMetCondition:(BOOL)condition;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class UIImage;

SWIFT_CLASS_NAMED("_SNR_ImageProvider")
@interface _SNR_ImageProvider : NSObject
- (UIImage * _Nullable)getCachedImageForURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)downloadImageSynchronouslyFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (BOOL)downloadAndCacheImageSynchronouslyFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)downloadImageAsynchronouslyFromURL:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SNR_Logger")
@interface _SNR_Logger : NSObject
+ (void)setUserDebugModeEnabled:(BOOL)enabled;
+ (void)setFileLoggingModeEnabled:(BOOL)enabled;
+ (void)setExtensionModeEnabled:(BOOL)enabled;
+ (void)userDebug:(NSString * _Nonnull)message;
+ (void)userInfo:(NSString * _Nonnull)message;
+ (void)userWarning:(NSString * _Nonnull)message;
+ (void)userError:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSMutableDictionary;

SWIFT_CLASS_NAMED("_SNR_MiscUtils")
@interface _SNR_MiscUtils : NSObject
+ (NSMutableDictionary * _Nonnull)makeNotificationUserInfoMutable:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)currencySymbolFromCurrencyCode:(NSString * _Nullable)currencyCode SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, id> * _Nonnull)cleanupDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary * _Nonnull)cleanupLegacyDictionary:(NSDictionary * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)cleanupStringToAsciiEncoding:(NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isUUID:(NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isURL:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)userLocalizedString:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SNR_MobileOperatorInfoProvider")
@interface _SNR_MobileOperatorInfoProvider : NSObject
+ (NSString * _Nullable)carrierName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)carrierCountry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SNR_SyneriseFrameworkInfoProvider")
@interface _SNR_SyneriseFrameworkInfoProvider : NSObject
+ (NSString * _Nonnull)bundleIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)SDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)SDKPluginVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
