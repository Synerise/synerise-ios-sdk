// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SyneriseSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import BackgroundTasks
import CommonCrypto
import CoreData
import CoreLocation
import CoreTelephony
import CryptoKit
import Foundation
import Swift
@_exported import SyneriseSDK
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_inheritsConvenienceInitializers @objc(_SNR_SyneriseFrameworkInfoProvider) public class _SNR_SyneriseFrameworkInfoProvider : ObjectiveC.NSObject {
  @objc public static func isSharedModeEnabled() -> Swift.Bool
  @objc public static func setSharedModeEnabled(_ enabled: Swift.Bool)
  @objc public static func isExtensionModeEnabled() -> Swift.Bool
  @objc public static func setExtensionModeEnabled(_ enabled: Swift.Bool)
  @objc public static func isBackgroundModeEnabled() -> Swift.Bool
  @objc public static func setBackgroundModeEnabled(_ enabled: Swift.Bool)
  @objc public static func bundleIdentifier() -> Swift.String
  @objc public static func SDKVersion() -> Swift.String
  @objc public static func SDKPreviousVersion() -> Swift.String?
  @objc public static func SDKPluginVersion() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BasicNotificationPayload : ObjectiveC.NSObject {
  @objc public var title: Swift.String?
  @objc public var body: Swift.String?
  @objc public var category: Swift.String?
  @objc public var userInfo: [Swift.String : Any]!
  @objc public var contentIsAvailable: Swift.Bool
  @objc public var contentIsMutable: Swift.Bool
  @objc public var parameters: [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRTrackerAutoTrackMode) public enum TrackerAutoTrackMode : Swift.Int {
  case plain
  case fine
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SNRTrackerAutoTrackingSettings) public class TrackerAutoTrackingSettings : ObjectiveC.NSObject {
  @objc public var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var mode: SyneriseSDK.TrackerAutoTrackMode {
    @objc get
    @objc set
  }
  @objc public var excludedClasses: [Swift.AnyClass] {
    @objc get
    @objc set
  }
  @objc public var excludedViewTags: [Swift.Int] {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRPromotionIdentifierType) public enum PromotionIdentifierType : Swift.Int, Swift.RawRepresentable {
  @objc(SNRPromotionIdentifierTypeUUID) case uuid = 0
  @objc(SNRPromotionIdentifierTypeCode) case code
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SNRPromotionIdentifier) public class PromotionIdentifier : SyneriseSDK.BaseModel {
  @objc final public let key: Swift.String
  @objc final public let value: Swift.String
  @objc public init(type: SyneriseSDK.PromotionIdentifierType, value: Swift.String)
  @objc(initWithUUID:) convenience public init(uuid: Swift.String)
  @objc(initWithCode:) convenience public init(code: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_TimeZoneDateFormatter) public class _SNR_TimeZoneDateFormatter : ObjectiveC.NSObject {
  @objc(dateFromString:withFormat:timeZoneName:) public func date(from string: Swift.String, withFormat format: Swift.String, timeZoneName: Swift.String) -> Foundation.Date?
  @objc(dateWithISO8601FormatFromString:timeZoneName:) public func dateWithISO8601Format(from string: Swift.String, timeZoneName: Swift.String) -> Foundation.Date?
  @objc(stringFromDate:withFormat:timeZoneName:) public func string(from date: Foundation.Date, withFormat format: Swift.String, timeZoneName: Swift.String) -> Swift.String
  @objc(stringWithISO8601FormatFromDate:timeZoneName:) public func stringWithISO8601Format(from date: Foundation.Date, timeZoneName: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRProductViewedEvent) final public class ProductViewedEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:productName:productId:) public init(label: Swift.String, productName: Swift.String, productId: Swift.String)
  @objc(initWithLabel:productName:productId:andParams:) public init(label: Swift.String, productName: Swift.String, productId: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc final public func setIsRecommended(_ isRecommended: Swift.Bool)
  @objc final public func setCategory(_ category: Swift.String)
  @objc final public func setURL(_ url: Foundation.URL)
  @objc deinit
}
@objc(SNRPromotionDiscountType) public enum PromotionDiscountType : Swift.Int, Swift.RawRepresentable {
  @objc(SNRPromotionDiscountTypeNone) case none = 0
  @objc(SNRPromotionDiscountTypePercent) case percent
  @objc(SNRPromotionDiscountTypeAmount) case amount
  @objc(SNRPromotionDiscountType2For1) case twoForOne
  @objc(SNRPromotionDiscountTypePoints) case points
  @objc(SNRPromotionDiscountTypeMultibuy) case multibuy
  @objc(SNRPromotionDiscountTypeExactPrice) case exactPrice
  public static func fromString(_ string: Swift.String?) -> SyneriseSDK.PromotionDiscountType
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SNRProductRemovedFromCartEvent) final public class ProductRemovedFromCartEvent : SyneriseSDK.CartEvent {
  @objc(initWithLabel:sku:finalPrice:quantity:) public init(label: Swift.String, sku: Swift.String, finalPrice: SyneriseSDK.UnitPrice, quantity: Swift.Int)
  @objc(initWithLabel:sku:finalPrice:quantity:andParams:) public init(label: Swift.String, sku: Swift.String, finalPrice: SyneriseSDK.UnitPrice, quantity: Swift.Int, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRInjectorSettings) public class InjectorSettings : ObjectiveC.NSObject {
  @objc public var automatic: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRDocumentApiQuery) public class DocumentApiQuery : ObjectiveC.NSObject {
  @objc final public let slug: Swift.String
  @objc public var productId: Swift.String?
  @objc public var itemsIds: [Swift.String]?
  @objc public var itemsExcluded: [Swift.String]?
  @objc public var additionalFilters: Swift.String?
  @objc public var filtersJoiner: SyneriseSDK.RecommendationFiltersJoinerRule
  @objc public var additionalElasticFilters: Swift.String?
  @objc public var elasticFiltersJoiner: SyneriseSDK.RecommendationFiltersJoinerRule
  @objc public var displayAttribute: [Swift.String]?
  @objc public var includeContextItems: Swift.Bool
  @objc public var params: [Swift.String : Any]?
  @objc public init(slug: Swift.String)
  @objc deinit
}
@objc(SNRInternalEventSource) public enum InternalEventSource : Swift.Int {
  @objc(SNRInternalEventSourceSDK) case sdk
  @objc(SNRInternalEventSourceInAppService) case inAppService
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SNRInternalEvent) public class InternalEvent : SyneriseSDK.Event {
  @objc public var source: SyneriseSDK.InternalEventSource
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:action:) public init(label: Swift.String, action: Swift.String)
  @objc(initWithLabel:action:andParams:) public init(label: Swift.String, action: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPushClickedEvent) final public class PushClickedEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
public typealias SNRLocalizableStringKey = Swift.String
public enum SyneriseLocalizable {
  public static let OK: Swift.String
  public static let CANCEL: Swift.String
}
@_inheritsConvenienceInitializers @objc(SNRGeneralSettings) public class GeneralSettings : ObjectiveC.NSObject {
  @objc public var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var doNotTrack: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var appGroupIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var keychainGroupIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var minTokenRefreshInterval: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public var SSLPinningPinset: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var shouldDestroySessionOnApiKeyChange: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var localizable: [SyneriseSDK.SNRLocalizableStringKey : Swift.String]? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRPromotionType) public enum PromotionType : Swift.Int, Swift.RawRepresentable {
  @objc(SNRPromotionTypeUnknown) case unknown = 0
  @objc(SNRPromotionTypeMembersOnly) case membersOnly
  @objc(SNRPromotionTypeCustom) case custom
  @objc(SNRPromotionTypeGeneral) case general
  @objc(SNRPromotionTypeHandbill) case handbill
  public static func fromString(_ string: Swift.String?) -> SyneriseSDK.PromotionType
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SNRAssignVoucherData) public class AssignVoucherData : SyneriseSDK.BaseModel {
  @objc final public let code: Swift.String
  @objc final public let expireIn: Foundation.Date?
  @objc final public let redeemAt: Foundation.Date?
  @objc final public let assignedAt: Foundation.Date?
  @objc final public let createdAt: Foundation.Date
  @objc final public let updatedAt: Foundation.Date
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRTrackerSettings) public class TrackerSettings : ObjectiveC.NSObject {
  @objc final public let autoTracking: SyneriseSDK.TrackerAutoTrackingSettings
  @objc final public let tracking: SyneriseSDK.TrackerDeclarativeTrackingSettings
  @objc public var isBackendTimeSyncRequired: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var minBatchSize: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var maxBatchSize: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var autoFlushTimeout: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public var eventsTriggeringFlush: [Swift.String] {
    @objc get
    @objc set
  }
  @objc public var locationAutomatic: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(SNRNotificationInfoRepresentable) public protocol NotificationInfoRepresentable {
  @objc func toNotificationInfo() -> SyneriseSDK.NotificationInfo?
}
@_hasMissingDesignatedInitializers @objc(SNRNotificationInfo) public class NotificationInfo : SyneriseSDK.BaseModel {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRProductAddedToFavoritesEvent) final public class ProductAddedToFavoritesEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@objc(SNRTokenOrigin) public enum TokenOrigin : Swift.UInt, Swift.RawRepresentable {
  @objc(SNRTokenOriginUnknown) case unknown = 0
  @objc(SNRTokenOriginIncognito) case incognito
  @objc(SNRTokenOriginAnonymous) case anonymous
  @objc(SNRTokenOriginSynerise) case synerise
  @objc(SNRTokenOriginSimpleAuth) case simpleAuth
  @objc(SNRTokenOriginFacebook) case facebook
  @objc(SNRTokenOriginOAuth) case oauth
  @objc(SNRTokenOriginApple) case apple
  @objc(SNRTokenOriginGoogle) case google
  public static func fromString(_ string: Swift.String?) -> SyneriseSDK.TokenOrigin
  public func toString() -> Swift.String
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SNRAssignVoucherResponse) public class AssignVoucherResponse : SyneriseSDK.BaseModel {
  @objc final public let message: Swift.String
  @objc final public let assignVoucherData: SyneriseSDK.AssignVoucherData
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRDocument) public class Document : SyneriseSDK.BaseModel {
  @objc final public let uuid: Swift.String
  @objc final public let slug: Swift.String
  @objc final public let schema: Swift.String
  @objc final public let content: [Swift.String : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_MiscUtils) public class _SNR_MiscUtils : ObjectiveC.NSObject {
  @objc public static func isApplicationInBackground() -> Swift.Bool
  @objc public static func makeNotificationUserInfoMutable(_ userInfo: [Swift.AnyHashable : Any]) -> Foundation.NSMutableDictionary
  @objc(currencySymbolFromCurrencyCode:) public static func currencySymbol(from currencyCode: Swift.String?) -> Swift.String
  @objc public static func cleanupDictionary(_ dictionary: [Swift.String : Any]) -> [Swift.String : Any]
  @objc public static func cleanupLegacyDictionary(_ dictionary: Foundation.NSDictionary) -> Foundation.NSDictionary
  @objc public static func cleanupStringToAsciiEncoding(_ string: Swift.String?) -> Swift.String
  @objc public static func isUUID(_ string: Swift.String?) -> Swift.Bool
  @objc public static func isURL(_ string: Swift.String) -> Swift.Bool
  @objc public static func makeUrl(withString urlString: Swift.String, parameters: [Swift.String : Swift.String]? = nil) -> Foundation.URL?
  @objc public static func usesSDKHybridPlugin() -> Swift.Bool
  @objc public static func usesReactNativePlugin() -> Swift.Bool
  @objc public static func usesFlutterPlugin() -> Swift.Bool
  @objc public static func usesXamarinPlugin() -> Swift.Bool
  @objc public static func localizedString(_ key: Swift.String) -> Swift.String
  @objc public static func userLocalizedString(_ key: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRClientStateDelegate) public protocol ClientStateDelegate {
  @objc optional func snr_clientIsSignedIn()
  @objc optional func snr_clientIsSignedOut(reason: SyneriseSDK.ClientSessionEndReason)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRClient) final public class Client : ObjectiveC.NSObject {
  @objc deinit
  @objc public static func setClientStateDelegate(_ delegate: (any SyneriseSDK.ClientStateDelegate)?)
  @objc(registerAccount:success:failure:) public static func registerAccount(context: SyneriseSDK.ClientRegisterAccountContext, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(requestAccountActivationWithEmail:success:failure:) public static func requestAccountActivation(email: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(confirmAccountActivationByToken:success:failure:) public static func confirmAccountActivation(token: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(requestAccountActivationByPinWithEmail:success:failure:) public static func requestAccountActivationByPin(email: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(confirmAccountActivationByPin:email:success:failure:) public static func confirmAccountActivationByPin(pinCode: Swift.String, email: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(signInWithEmail:password:success:failure:) public static func signIn(email: Swift.String, password: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(signInConditionallyWithEmail:password:success:failure:) public static func signInConditionally(email: Swift.String, password: Swift.String, success: @escaping (SyneriseSDK.ClientConditionalAuthResult) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(authenticateWithToken:clientIdentityProvider:authID:context:success:failure:) public static func authenticate(token: Any, clientIdentityProvider: SyneriseSDK.ClientIdentityProvider, authID: Swift.String?, context: SyneriseSDK.ClientAuthenticationContext?, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(authenticateConditionallyWithToken:clientIdentityProvider:authID:context:success:failure:) public static func authenticateConditionally(token: Any, clientIdentityProvider: SyneriseSDK.ClientIdentityProvider, authID: Swift.String?, context: SyneriseSDK.ClientConditionalAuthenticationContext?, success: @escaping (SyneriseSDK.ClientConditionalAuthResult) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(authenticateWithTokenPayload:authID:success:failure:) public static func authenticate(tokenPayload: SyneriseSDK.TokenPayload, authID: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(simpleAuthentication:authID:success:failure:) public static func simpleAuthentication(data: SyneriseSDK.ClientSimpleAuthenticationData, authID: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(isSignedIn) public static func isSignedIn() -> Swift.Bool
  @objc(isSignedInViaSimpleAuthentication) public static func isSignedInViaSimpleAuthentication() -> Swift.Bool
  @objc(signOut) public static func signOut()
  @objc(signOutWithMode:fromAllDevices:success:failure:) public static func signOut(mode: SyneriseSDK.ClientSignOutMode, fromAllDevices: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(refreshTokenWithSuccess:failure:) public static func refreshToken(success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(retrieveTokenWithSuccess:failure:) public static func retrieveToken(success: @escaping (SyneriseSDK.Token) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getUUID) public static func getUUID() -> Swift.String
  @objc(getUUIDForAuthenticationWithAuthID:) public static func getUUIDForAuthentication(authID: Swift.String) -> Swift.String
  @objc(regenerateUUID) public static func regenerateUUID() -> Swift.Bool
  @objc(regenerateUUIDWithClientIdentifier:) public static func regenerateUUID(clientIdentifier: Swift.String?) -> Swift.Bool
  @objc(destroySession) public static func destroySession()
  @objc(getAccountWithSuccess:failure:) public static func getAccount(success: @escaping (SyneriseSDK.ClientAccountInformation) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getEventsWithApiQuery:success:failure:) public static func getEvents(apiQuery: SyneriseSDK.ClientEventsApiQuery?, success: @escaping ([SyneriseSDK.ClientEventData]) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(updateAccountBasicInformation:success:failure:) public static func updateAccountBasicInformation(context: SyneriseSDK.ClientUpdateAccountBasicInformationContext, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(updateAccount:success:failure:) public static func updateAccount(context: SyneriseSDK.ClientUpdateAccountContext, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(requestPasswordReset:success:failure:) public static func requestPasswordReset(context: SyneriseSDK.ClientPasswordResetRequestContext, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(confirmResetPassword:success:failure:) public static func confirmResetPassword(context: SyneriseSDK.ClientPasswordResetConfirmationContext, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(changePassword:oldPassword:success:failure:) public static func changePassword(password: Swift.String, oldPassword: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(requestEmailChange:password:externalToken:authID:success:failure:) public static func requestEmailChange(email: Swift.String, password: Swift.String?, externalToken: Any?, authID: Swift.String?, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(confirmEmailChange:newsletterAgreement:success:failure:) public static func confirmEmailChange(token: Swift.String, newsletterAgreement: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(requestPhoneUpdate:success:failure:) public static func requestPhoneUpdate(phone: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(confirmPhoneUpdate:confirmationCode:smsAgreement:success:failure:) public static func confirmPhoneUpdate(phone: Swift.String, confirmationCode: Swift.String, smsAgreement: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(deleteAccount:clientIdentityProvider:authID:success:failure:) public static func deleteAccount(clientAuthFactor: Any, clientIdentityProvider: SyneriseSDK.ClientIdentityProvider, authID: Swift.String?, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(recognizeAnonymousWithEmail:customIdentify:parameters:) public static func recognizeAnonymous(email: Swift.String?, customIdentify: Swift.String?, parameters: [Swift.String : Any]?)
  @objc(registerForPush:success:failure:) public static func registerForPush(registrationToken: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(registerForPush:mobilePushAgreement:success:failure:) public static func registerForPush(registrationToken: Swift.String, mobilePushAgreement: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
}
extension SyneriseSDK.Client : SyneriseSDK._SNR_SignalReceivable {
  @objc final public func signalReceived(_ signal: SyneriseSDK._SNR_BaseSignal, parameters: [Swift.String : Any])
}
@_inheritsConvenienceInitializers @objc(_SNR_DeviceInfoProvider) public class _SNR_DeviceInfoProvider : ObjectiveC.NSObject {
  @objc public static func deviceID() -> Swift.String
  @objc public static func deviceModel() -> Swift.String
  @objc public static func deviceManufacturer() -> Swift.String
  @objc public static func deviceType() -> Swift.String
  @objc public static func deviceResolution() -> Swift.String
  @objc public static func operatingSystem() -> Swift.String
  @objc public static func operatingSystemVersion() -> Swift.String
  @objc public static func operatingSystemLanguage() -> Swift.String?
  @objc public static func isPhone() -> Swift.Bool
  @objc public static func isTablet() -> Swift.Bool
  @objc public static func isDarkModeEnabled() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRCrashEvent) final public class CrashEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(setExceptionName:) final public func setExceptionName(_ exceptionName: Swift.String)
  @objc(setExceptionReason:) final public func setExceptionReason(_ exceptionReason: Swift.String)
  @objc(setExceptionStacktrace:) final public func setExceptionStacktrace(_ exceptionStacktrace: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRecommendationResponseExtras) public class RecommendationResponseExtras : SyneriseSDK.BaseModel {
  @objc final public let contextItems: [SyneriseSDK.Recommendation]
  @objc final public let correlationId: Swift.String
  @objc final public let slots: [SyneriseSDK.RecommendationResponseExtrasSlot]
  @objc deinit
}
@objc(SNRUnitPrice) public class UnitPrice : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public init(amount: Swift.Float)
  @objc public init(amount: Swift.Float, locale: Foundation.Locale)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNREvent) open class Event : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var _action: Swift.String {
    @objc get
  }
  @objc public var _client: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc public var parameters: [Swift.String : Any]? {
    @objc get
  }
  @objc(initWithLabel:) public init(label: Swift.String)
  @objc(initWithLabel:andParams:) public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public func _setParam(_ param: Any?, forKey key: Swift.String)
  @objc public func _toDictionary() -> [Swift.String : Any]
  @objc deinit
}
public enum SyneriseApiUrls {
  public static let SYNERISE_AZ_API_URL: Swift.String
  public static let SYNERISE_AZU_API_URL: Swift.String
  public static let SYNERISE_GEB_API_URL: Swift.String
}
@_inheritsConvenienceInitializers @objc(_SNR_PriceFormatter) final public class _SNR_PriceFormatter : ObjectiveC.NSObject {
  @objc(setGroupingSeparator:) final public func setGroupingSeparator(_ groupingSeparator: Swift.String?)
  @objc(setDecimalSeparator:) final public func setDecimalSeparator(_ decimalSeparator: Swift.String?)
  @objc(stringFromNumber:) final public func string(from number: Foundation.NSNumber) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRRecommendationOptions) public class RecommendationOptions : ObjectiveC.NSObject {
  @objc final public let slug: Swift.String
  @objc public var productID: Swift.String?
  @objc public var productIDs: [Swift.String]?
  @objc public var itemsExcluded: [Swift.String]?
  @objc public var additionalFilters: Swift.String?
  @objc public var filtersJoiner: SyneriseSDK.RecommendationFiltersJoinerRule
  @objc public var additionalElasticFilters: Swift.String?
  @objc public var elasticFiltersJoiner: SyneriseSDK.RecommendationFiltersJoinerRule
  @objc public var displayAttribute: [Swift.String]?
  @objc public var includeContextItems: Swift.Bool
  @objc public init(slug: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPromotionDiscountStep) public class PromotionDiscountStep : SyneriseSDK.BaseModel {
  @objc final public let discountValue: Foundation.NSNumber
  @objc final public let usageThreshold: Foundation.NSNumber
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRTokenPayload) public class TokenPayload : ObjectiveC.NSObject {
  @objc final public let tokenString: Swift.String
  @objc final public let expirationDate: Foundation.Date
  @objc final public let creationDate: Foundation.Date
  @objc final public let rlm: Swift.String
  @objc final public let origin: SyneriseSDK.TokenOrigin
  @objc final public let uuid: Swift.String
  @objc final public let clientId: Swift.String
  @objc public var customId: Swift.String?
  @objc(initWithTokenString:expirationDate:creationDate:rlm:origin:uuid:clientId:customId:) public init(tokenString: Swift.String, expirationDate: Foundation.Date, creationDate: Foundation.Date, rlm: Swift.String, origin: SyneriseSDK.TokenOrigin, uuid: Swift.String, clientId: Swift.String, customId: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRSearchedEvent) final public class SearchedEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@objc(SNRTrackerDelegate) public protocol TrackerDelegate {
  @objc optional func snr_locationUpdateRequired()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRTracker) final public class Tracker : ObjectiveC.NSObject {
  @objc deinit
  @objc(setDelegate:) public static func setDelegate(_ delegate: any SyneriseSDK.TrackerDelegate)
  @objc(setCustomIdentifier:) public static func setCustomIdentifier(_ customIdentifier: Swift.String?)
  @objc(setCustomEmail:) public static func setCustomEmail(_ customEmail: Swift.String?)
  @objc(send:) public static func send(_ event: SyneriseSDK.Event)
  @objc(flushEventsWithCompletionHandler:) public static func flushEvents(completionHandler: (() -> Swift.Void)? = nil)
}
extension SyneriseSDK.Tracker : SyneriseSDK._SNR_SignalReceivable {
  @objc final public func signalReceived(_ signal: SyneriseSDK._SNR_BaseSignal, parameters: [Swift.String : Any])
}
public let SDK_UNKNOWN_VERSION: Swift.String
@_hasMissingDesignatedInitializers @objc(SNRAppearedInLocationEvent) public class AppearedInLocationEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:andLocation:) convenience public init(label: Swift.String, location: CoreLocation.CLLocation)
  @objc(initWithLabel:andLocation:andParams:) public init(label: Swift.String, location: CoreLocation.CLLocation, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPromotion) public class Promotion : SyneriseSDK.BaseModel {
  @objc final public let uuid: Swift.String
  @objc final public let code: Swift.String
  @objc final public let status: SyneriseSDK.PromotionStatus
  @objc final public let type: SyneriseSDK.PromotionType
  @objc final public let details: SyneriseSDK.PromotionDetails?
  @objc final public let redeemLimitPerClient: Foundation.NSNumber?
  @objc final public let redeemQuantityPerActivation: Foundation.NSNumber?
  @objc final public let currentRedeemedQuantity: Foundation.NSNumber?
  @objc final public let currentRedeemLimit: Foundation.NSNumber?
  @objc final public let activationCounter: Foundation.NSNumber?
  @objc final public let possibleRedeems: Foundation.NSNumber?
  @objc final public let requireRedeemedPoints: Foundation.NSNumber?
  @objc final public let discountType: SyneriseSDK.PromotionDiscountType
  @objc final public let discountValue: Foundation.NSNumber
  @objc final public let discountMode: SyneriseSDK.PromotionDiscountMode
  @objc final public let discountModeDetails: SyneriseSDK.PromotionDiscountModeDetails?
  @objc final public let priority: Foundation.NSNumber
  @objc final public let price: Foundation.NSNumber
  @objc final public let itemScope: SyneriseSDK.PromotionItemScope
  @objc final public let minBasketValue: Foundation.NSNumber?
  @objc final public let maxBasketValue: Foundation.NSNumber?
  @objc final public let name: Swift.String
  @objc final public let headline: Swift.String?
  @objc final public let descriptionText: Swift.String?
  @objc final public let images: [SyneriseSDK.PromotionImage]?
  @objc final public let startAt: Foundation.Date?
  @objc final public let expireAt: Foundation.Date?
  @objc final public let lastingAt: Foundation.Date?
  @objc final public let lastingTime: Foundation.NSNumber?
  @objc final public let displayFrom: Swift.String?
  @objc final public let displayTo: Swift.String?
  @objc final public let catalogIndexItems: [Swift.String]?
  @objc final public let params: [Swift.String : Any]?
  @objc final public let tags: [Swift.String]?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPromotionImage) public class PromotionImage : SyneriseSDK.BaseModel {
  @objc final public let url: Swift.String
  @objc final public let type: SyneriseSDK.PromotionImageType
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRLoggedInEvent) final public class LoggedInEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRecommendationResponse) public class RecommendationResponse : SyneriseSDK.BaseModel {
  @objc final public let name: Swift.String
  @objc final public let campaignHash: Swift.String
  @objc final public let campaignID: Swift.String
  @objc final public let correlationID: Swift.String
  @objc final public let schema: Swift.String
  @objc final public let slug: Swift.String
  @objc final public let UUID: Swift.String
  @objc final public let extras: SyneriseSDK.RecommendationResponseExtras
  @objc final public let items: [SyneriseSDK.Recommendation]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_UTCDateFormatter) final public class _SNR_UTCDateFormatter : ObjectiveC.NSObject {
  @objc(dateFromString:withFormat:) final public func date(from string: Swift.String?, withFormat format: Swift.String) -> Foundation.Date?
  @objc(dateWithISO8601FormatFromString:) final public func dateWithISO8601Format(from string: Swift.String?) -> Foundation.Date?
  @objc(stringFromDate:withFormat:) final public func string(from date: Foundation.Date?, withFormat format: Swift.String) -> Swift.String?
  @objc(stringWithISO8601FormatFromDate:) final public func stringWithISO8601Format(from date: Foundation.Date?) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_ImageProvider) public class _SNR_ImageProvider : ObjectiveC.NSObject {
  @objc(getCachedImageForURL:) public func getCachedImage(for url: Foundation.URL) -> UIKit.UIImage?
  @objc(downloadImageSynchronouslyFromURL:) public func downloadImageSynchronously(from url: Foundation.URL) -> UIKit.UIImage?
  @objc(downloadAndCacheImageSynchronouslyFromURL:) public func downloadAndCacheImageSynchronously(from url: Foundation.URL) -> Swift.Bool
  @objc(downloadImageAsynchronouslyFromURL:completionBlock:) public func downloadImageAsynchronously(from url: Foundation.URL, completion: @escaping (UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRRecommendationEvent) public class RecommendationEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRApiErrorCause) public class SNRApiErrorCause : ObjectiveC.NSObject {
  @objc public var field: Swift.String?
  @objc public var message: Swift.String?
  @objc public var code: Swift.Int
  @objc public var rejectedValue: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_DelegateUtils) public class _SNR_DelegateUtils : ObjectiveC.NSObject {
  @objc public static func object(_ object: Any?, conformsTo protocol: ObjectiveC.`Protocol`) -> Swift.Bool
  @objc public static func delegate(_ delegate: Any?, respondsTo selector: ObjectiveC.Selector) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRClientAccountInformation) public class ClientAccountInformation : SyneriseSDK.BaseModel, Foundation.NSSecureCoding {
  @objc final public let clientId: Swift.Int
  @objc final public let email: Swift.String
  @objc final public let customId: Swift.String?
  @objc final public let uuid: Swift.String
  @objc final public let firstName: Swift.String?
  @objc final public let lastName: Swift.String?
  @objc final public let displayName: Swift.String?
  @objc final public let phone: Swift.String?
  @objc final public let sex: SyneriseSDK.ClientSex
  @objc final public let birthDate: Swift.String?
  @objc final public let avatarUrl: Swift.String?
  @objc public var company: Swift.String?
  @objc public var address: Swift.String?
  @objc public var city: Swift.String?
  @objc public var province: Swift.String?
  @objc public var zipCode: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc final public let lastActivityDate: Foundation.Date
  @objc final public let anonymous: Swift.Bool
  @objc final public let agreements: SyneriseSDK.ClientAgreements
  @objc final public let attributes: [Swift.String : Any]?
  @objc final public let tags: [Swift.String]?
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRClientEventData) public class ClientEventData : SyneriseSDK.BaseModel {
  @objc final public let time: Swift.String
  @objc final public let label: Swift.String
  @objc final public let action: Swift.String
  @objc final public let client: [Swift.String : Any]
  @objc final public let params: [Swift.String : Any]
  @objc(getClientID) public func getClientID() -> Swift.Int
  @objc(getClientUUIDString) public func getClientUUIDString() -> Swift.String?
  @objc(getClientEmail) public func getClientEmail() -> Swift.String?
  @objc deinit
}
@objc(SNRClientSex) public enum ClientSex : Swift.Int {
  @objc(SNRClientSexNotSpecified) case notSpecified = 0
  @objc(SNRClientSexMale) case male
  @objc(SNRClientSexFemale) case female
  @objc(SNRClientSexOther) case other
  public static func fromString(_ string: Swift.String) -> SyneriseSDK.ClientSex
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SNRClientConditionalAuthStatus) public enum ClientConditionalAuthStatus : Swift.Int {
  @objc(SNRClientConditionalAuthStatusSuccess) case success
  @objc(SNRClientConditionalAuthStatusUnauthorized) case unauthorized
  @objc(SNRClientConditionalAuthStatusActivationRequired) case activationRequired
  @objc(SNRClientConditionalAuthStatusRegistrationRequired) case registrationRequired
  @objc(SNRClientConditionalAuthStatusApprovalRequired) case approvalRequired
  @objc(SNRClientConditionalAuthStatusTermsAcceptanceRequired) case termsAcceptanceRequired
  @objc(SNRClientConditionalAuthStatusMFARequired) case mfaRequired
  @objc(SNRClientConditionalAuthStatusUnknown) case unknown
  public static func fromString(_ string: Swift.String) -> SyneriseSDK.ClientConditionalAuthStatus
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRClientAgreements) public class ClientAgreements : SyneriseSDK.BaseModel, Foundation.NSSecureCoding, Foundation.NSCopying {
  @objc public var email: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var sms: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var push: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var bluetooth: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var rfid: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var wifi: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRClientConditionalAuthResult) public class ClientConditionalAuthResult : SyneriseSDK.BaseModel {
  @objc final public let status: SyneriseSDK.ClientConditionalAuthStatus
  @objc final public let conditions: [Any]?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPromotionDetails) public class PromotionDetails : SyneriseSDK.BaseModel {
  @objc final public let discountType: SyneriseSDK.PromotionDiscountTypeDetails
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRInAppMessageData) public class InAppMessageData : SyneriseSDK.BaseModel {
  @objc final public let campaignHash: Swift.String
  @objc final public let variantIdentifier: Swift.String
  @objc final public let additionalParameters: [Swift.String : Swift.String]?
  @objc final public let isTest: Swift.Bool
  @objc(initWithCampaignHash:variantIdentifier:additionalParameters:isTest:) public init(campaignHash: Swift.String, variantIdentifier: Swift.String, additionalParameters: [Swift.String : Swift.String]?, isTest: Swift.Bool)
  @objc deinit
}
public enum SNErrorUserInfoKey {
}
public protocol _SNR_ClientManagerType {
  func setClientId(_ clientId: Swift.String?)
  func setCustomIdentifier(_ customIdentifier: Swift.String?)
  func setCustomEmail(_ customEmail: Swift.String?)
  func setClientLogin(_ clientLogin: Swift.String?)
  func setClientUUID(_ uuid: Foundation.UUID?)
  func setNewAnonymousClient()
  func setNewAnonymousClientWithClientIdentifier(_ clientIdentifier: Swift.String?)
  func setNewClientWithRecoveredClientUUID(_ clientUUID: Foundation.UUID)
  func setNewInitialAnonymousClient()
  func getUUIDStringForAuthentication(withAuthID authID: Swift.String) -> Swift.String
  func prepareSigning(withLogin login: Swift.String?) -> Swift.String
  func prepareSigning(withLogin login: Swift.String?, orUUIDString UUIDString: Swift.String?) -> Swift.String
  func signingSuccess()
  func signingFailure()
}
@_hasMissingDesignatedInitializers @objc(_SNR_ClientManager) public class _SNR_ClientManager : ObjectiveC.NSObject, SyneriseSDK._SNR_ClientManagerType {
  @objc public var client: SyneriseSDK._SNR_ClientModel!
  @objc public static func setRecoveredClientUUID(_ uuid: Foundation.UUID?)
  @objc deinit
  @objc public func setClientId(_ clientId: Swift.String?)
  @objc public func setCustomIdentifier(_ customIdentifier: Swift.String?)
  @objc public func setCustomEmail(_ customEmail: Swift.String?)
  @objc public func setClientLogin(_ clientLogin: Swift.String?)
  @objc public func setClientUUID(_ uuid: Foundation.UUID?)
  @objc public func setNewAnonymousClient()
  @objc public func setNewAnonymousClientWithClientIdentifier(_ clientIdentifier: Swift.String?)
  @objc public func setNewClientWithRecoveredClientUUID(_ clientUUID: Foundation.UUID)
  @objc public func setNewInitialAnonymousClient()
  @objc public func getUUIDStringForAuthentication(withAuthID authID: Swift.String) -> Swift.String
  @objc public func prepareSigning(withLogin login: Swift.String?) -> Swift.String
  @objc public func prepareSigning(withLogin login: Swift.String?, orUUIDString UUIDString: Swift.String?) -> Swift.String
  @objc public func signingSuccess()
  @objc public func signingFailure()
}
extension SyneriseSDK._SNR_ClientManager : SyneriseSDK._SNR_SignalReceivable {
  @objc dynamic public func signalReceived(_ signal: SyneriseSDK._SNR_BaseSignal, parameters: [Swift.String : Any])
}
public enum ClientModelUUIDOrigin : Swift.String {
  case generated
  case injected
  case incognito
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_SNR_ClientModel) public class _SNR_ClientModel : ObjectiveC.NSObject {
  @objc public var clientId: Swift.String?
  @objc public var uuid: Foundation.UUID
  public var uuidOrigin: SyneriseSDK.ClientModelUUIDOrigin
  @objc public var login: Swift.String?
  @objc public var identifier: Swift.String?
  @objc public var customIdentifier: Swift.String?
  @objc public var customEmail: Swift.String?
  @objc public func getUUIDString() -> Swift.String
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRSharedEvent) final public class SharedEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRClientUpdateAccountContext) public class ClientUpdateAccountContext : SyneriseSDK.BaseModel {
  @objc public var email: Swift.String?
  @objc public var customId: Swift.String?
  @objc public var uuid: Swift.String?
  @objc public var firstName: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var displayName: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var sex: SyneriseSDK.ClientSex
  @objc public var birthDate: Swift.String?
  @objc public var avatarUrl: Swift.String?
  @objc public var company: Swift.String?
  @objc public var address: Swift.String?
  @objc public var city: Swift.String?
  @objc public var province: Swift.String?
  @objc public var zipCode: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var agreements: SyneriseSDK.ClientAgreements?
  @objc public var attributes: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRClientConditionalAuthenticationContext) public class ClientConditionalAuthenticationContext : SyneriseSDK.BaseModel {
  @objc public var agreements: SyneriseSDK.ClientAgreements?
  @objc public var attributes: [Swift.String : Any]?
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRClientPasswordResetConfirmationContext) public class ClientPasswordResetConfirmationContext : SyneriseSDK.BaseModel {
  @objc final public let password: Swift.String
  @objc final public let token: Swift.String
  @objc(initWithPassword:andToken:) public init(password: Swift.String, token: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRClientAuthenticationContext) public class ClientAuthenticationContext : SyneriseSDK.BaseModel {
  @objc public var agreements: SyneriseSDK.ClientAgreements?
  @objc public var attributes: [Swift.String : Any]?
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRClientPasswordResetRequestContext) public class ClientPasswordResetRequestContext : SyneriseSDK.BaseModel {
  @objc final public let email: Swift.String
  @objc(initWithEmail:) public init(email: Swift.String)
  @objc deinit
}
@objc(SNRClientRegisterAccountContext) public class ClientRegisterAccountContext : SyneriseSDK.BaseModel {
  @objc final public let email: Swift.String
  @objc final public let password: Swift.String
  @objc public var customId: Swift.String?
  @objc public var firstName: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var sex: SyneriseSDK.ClientSex {
    @objc get
    @objc set
  }
  @objc public var company: Swift.String?
  @objc public var address: Swift.String?
  @objc public var city: Swift.String?
  @objc public var province: Swift.String?
  @objc public var zipCode: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var agreements: SyneriseSDK.ClientAgreements?
  @objc public var attributes: [Swift.String : Any]?
  @objc(initWithEmail:andPassword:) public init(email: Swift.String, password: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRClientUpdateAccountBasicInformationContext) public class ClientUpdateAccountBasicInformationContext : SyneriseSDK.BaseModel {
  @objc public var firstName: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var displayName: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var sex: SyneriseSDK.ClientSex {
    @objc get
    @objc set
  }
  @objc public var birthDate: Swift.String?
  @objc public var avatarUrl: Swift.String?
  @objc public var company: Swift.String?
  @objc public var address: Swift.String?
  @objc public var city: Swift.String?
  @objc public var province: Swift.String?
  @objc public var zipCode: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var agreements: SyneriseSDK.ClientAgreements?
  @objc public var attributes: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRClientSimpleAuthenticationData) public class ClientSimpleAuthenticationData : SyneriseSDK.BaseModel {
  @objc public var email: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var customId: Swift.String?
  @objc public var uuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var firstName: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var displayName: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var sex: SyneriseSDK.ClientSex {
    @objc get
    @objc set
  }
  @objc public var birthDate: Foundation.Date?
  @objc public var avatarUrl: Swift.String?
  @objc public var company: Swift.String?
  @objc public var address: Swift.String?
  @objc public var city: Swift.String?
  @objc public var province: Swift.String?
  @objc public var zipCode: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var agreements: SyneriseSDK.ClientAgreements?
  @objc public var attributes: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc public var tags: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRApiErrorType) public enum SNRApiErrorType : Swift.Int {
  @objc(SNRApiErrorTypeUnknown) case unknown
  @objc(SNRApiErrorTypeNetwork) case network
  @objc(SNRApiErrorTypeUnauthorizedSession) case unauthorizedSession
  @objc(SNRApiErrorTypeHttp) case http
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SNRApiErrorHttpErrorCategory) public enum SNRApiErrorHttpErrorCategory : Swift.Int {
  @objc(SNRApiErrorHttpErrorCategoryBadRequest) case badRequest
  @objc(SNRApiErrorHttpErrorCategoryUnauthorized) case unauthorized
  @objc(SNRApiErrorHttpErrorCategoryForbidden) case forbidden
  @objc(SNRApiErrorHttpErrorCategoryNotFound) case notFound
  @objc(SNRApiErrorHttpErrorCategoryRangeNotSatisfable) case rangeNotSatisfable
  @objc(SNRApiErrorHttpErrorCategoryServerError) case serverError
  @objc(SNRApiErrorHttpErrorCategoryUnknown) case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRApiError) public class SNRApiError : SyneriseSDK.SNRError, @unchecked Swift.Sendable {
  @objc final public let errorBody: SyneriseSDK.SNRApiErrorBody?
  @objc public var errorType: SyneriseSDK.SNRApiErrorType {
    @objc get
  }
  @objc public var httpCode: Swift.Int {
    @objc get
  }
  @objc public var httpErrorCategory: SyneriseSDK.SNRApiErrorHttpErrorCategory {
    @objc get
  }
  @objc final public let errors: [SyneriseSDK.SNRError]?
  @objc(initWithDomain:code:errorBody:userInfo:errors:) public init(domain: Foundation.NSErrorDomain, code: Swift.Int, errorBody: SyneriseSDK.SNRApiErrorBody? = nil, userInfo: [Swift.String : Any]? = nil, errors: [SyneriseSDK.SNRError]? = nil)
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo: [Swift.String : Any]?)
  @available(*, deprecated, message: "Use `errorType` property instead.")
  @objc(getType) public func getType() -> SyneriseSDK.SNRApiErrorType
  @available(*, deprecated, message: "Use `httpCode` property instead.")
  @objc(getHttpCode) public func getHttpCode() -> Swift.Int
  @available(*, deprecated, message: "Use `errorBody.internalErrorCode` property instead.")
  @objc(getErrorCode) public func getErrorCode() -> Swift.String?
  @available(*, deprecated, message: "Use `errorBody` property instead.")
  @objc(getBody) public func getBody() -> Swift.String?
  @objc deinit
}
@objc(SNRErrorCode) public enum SNRErrorCode : Swift.Int {
  @objc(SNRErrorCodeUnknownError) case unknownError = -101
  @objc(SNRErrorCodeInvalidArgument) case invalidArgument = 3050
  @objc(SNRErrorCodeInternalInconsistency) case internalInconsistency = 3060
  @objc(SNRErrorCodeInvalidImageResources) case invalidImageResources = 3090
  @objc(SNRErrorCodeImageNotDownloaded) case imageNotDownloaded = 3110
  @objc(SNRErrorCodeWebViewNotPreloaded) case webViewNotPreloaded = 3130
  @objc(SNRErrorCodeCryptoFailedError) case cryptoFailedError = 3610
  @objc(SNRErrorCodeMigrationError) case migrationError = 3710
  @objc(SNRErrorCodeContentWidgetError) case contentWidgetError = 3810
  @objc(SNRErrorCodeNotificationServiceExtensionError) case notificationServiceExtensionError = 3910
  @objc(SNRErrorCodeObjectConsistencyError) case objectConsistencyError = 4010
  @objc(SNRErrorCodeUnknownApiError) case unknownApiError = -102
  @objc(SNRErrorCodeModuleNotReadyApiError) case moduleNotReadyApiError = -110
  @objc(SNRErrorCodeNetworkApiError) case networkApiError = -105
  @objc(SNRErrorCodeInvalidRequestApiError) case invalidRequestApiError = -103
  @objc(SNRErrorCodeInvalidRequestSessionApiError) case invalidRequestSessionApiError = -104
  @objc(SNRErrorCodeInvalidResponseApiError) case invalidResponseApiError = -106
  @objc(SNRErrorCodeInvalidEtagCacheResponseApiError) case invalidEtagCacheResponseApiError = -107
  @objc(SNRErrorCodeRequestBlockedByCircuitBreakerApiError) case requestBlockedByCircuitBreakerApiError = -108
  @objc(SNRErrorCodeRequestBlockedByIncognitoModeApiError) case requestBlockedByIncognitoModeApiError = -109
  @objc(SNRErrorCodeClientSessionUnauthorizedApiError) case clientSessionUnauthorizedApiError = 3200
  @objc(SNRErrorCodeClientSessionExpiredApiError) case clientSessionExpiredApiError = 3210
  @objc(SNRErrorCodeClientSessionAlreadySignedOutApiError) case clientSessionAlreadySignedOutApiError = 3220
  @objc(SNRErrorCodeJWTValidationFailedApiError) case JWTValidationFailedApiError = 3300
  @objc(SNRErrorCodeJWTProcessingFailedApiError) case JWTProcessingFailedApiError = 3310
  @objc(SNRErrorCodeMissingPublicKeyApiError) case missingPublicKeyApiError = 3320
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SNRCacheManager) final public class CacheManager : ObjectiveC.NSObject {
  @objc public static func get(_ aClass: Swift.AnyClass) -> Swift.AnyObject?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SNRSwiftCommandProxyProtocol {
  @objc init()
  @objc func execute(command: Swift.String, args: [Swift.String : Any]?)
  @objc func getValue(command: Swift.String, args: [Swift.String : Any]?) -> Any?
  @objc func getValueForKey(_ key: Swift.String) -> Any?
}
@_hasMissingDesignatedInitializers @objc(SNRScreenView) public class ScreenView : SyneriseSDK.BaseModel, SyneriseSDK.HasResponseRawData {
  @objc final public let identifier: Swift.String
  @objc final public let name: Swift.String
  @objc final public let hashString: Swift.String
  @objc final public let path: Swift.String
  @objc final public let priority: Swift.Int
  @objc final public let audience: SyneriseSDK.ScreenViewAudienceInfo?
  @objc final public let data: Any?
  @objc final public let createdAt: Foundation.Date
  @objc final public let updatedAt: Foundation.Date
  @objc public var responseRawData: SyneriseSDK.ResponseRawData?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRVoucherCodesData) public class VoucherCodesData : SyneriseSDK.BaseModel {
  @objc final public let code: Swift.String
  @objc final public let status: SyneriseSDK.VoucherCodeStatus
  @objc final public let clientId: Swift.Int
  @objc final public let clientUuid: Swift.String?
  @objc final public let poolUuid: Swift.String
  @objc final public let expireIn: Foundation.Date?
  @objc final public let redeemAt: Foundation.Date?
  @objc final public let assignedAt: Foundation.Date?
  @objc final public let createdAt: Foundation.Date
  @objc final public let updatedAt: Foundation.Date
  @objc deinit
}
public protocol _SNR_BackgroundTaskManagerType : AnyObject {
  func setBackgroundTaskIdentifiers(_ identifiers: [Swift.String])
  func registerMainBackgroundTask(handler: @escaping () -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
@objc(_SNR_BackgroundTaskManager) public class _SNR_BackgroundTaskManager : ObjectiveC.NSObject, SyneriseSDK._SNR_BackgroundTaskManagerType {
  @objc deinit
  @objc(setBackgroundTaskIdentifiers:) public func setBackgroundTaskIdentifiers(_ identifiers: [Swift.String])
  @objc(registerMainBackgroundTaskWithHandler:) public func registerMainBackgroundTask(handler: @escaping () -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc(SNRLoggedOutEvent) final public class LoggedOutEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@objc(SNRHasResponseRawData) public protocol HasResponseRawData {
  @objc var responseRawData: SyneriseSDK.ResponseRawData? { get set }
}
@_hasMissingDesignatedInitializers @objc(SNRResponseRawData) public class ResponseRawData : ObjectiveC.NSObject {
  @objc public var data: Foundation.Data
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRNotificationsSettings) public class NotificationsSettings : ObjectiveC.NSObject {
  @objc public var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var disableInAppAlerts: Swift.Bool {
    @objc get
    @objc set
  }
  @available(iOS 10.0, *)
  @objc public var encryption: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRPromotionsApiQuery) public class PromotionsApiQuery : ObjectiveC.NSObject {
  @objc public var statuses: [SyneriseSDK.SNRPromotionStatusString]
  @objc public var types: [SyneriseSDK.SNRPromotionTypeString]
  @objc public var sorting: [[SyneriseSDK.SNRPromotionSortingKey : SyneriseSDK.SNRApiQuerySortingOrderString]]?
  @objc public var limit: Swift.Int
  @objc public var page: Swift.Int
  @objc public var includeMeta: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc(_SNR_ServerTimeManagerType) public protocol _SNR_ServerTimeManagerType {
  @objc func getServerTimeByCache()
  @objc func fetchServerTimeSynchronously()
  @objc func fetchServerTimeAsynchronously()
  @objc func isReady() -> Swift.Bool
  @objc(waitWhenIsReadyWithCompletion:) func waitWhenIsReady(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc(notifyWhenIsReadyWithCompletion:) func notifyWhenIsReady(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc(getCurrentServerTime) func getCurrentServerTime() -> Foundation.Date?
  @objc(getServerTimeForDeviceTime:) func getServerTime(forDeviceTime date: Foundation.Date) -> Foundation.Date?
}
@_hasMissingDesignatedInitializers @objc(_SNR_ServerTimeManager) final public class _SNR_ServerTimeManager : ObjectiveC.NSObject, SyneriseSDK._SNR_ServerTimeManagerType {
  @objc deinit
  @objc final public func getServerTimeByCache()
  @objc final public func fetchServerTimeSynchronously()
  @objc final public func fetchServerTimeAsynchronously()
  @objc final public func isReady() -> Swift.Bool
  @objc(waitWhenIsReadyWithCompletion:) final public func waitWhenIsReady(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc(notifyWhenIsReadyWithCompletion:) final public func notifyWhenIsReady(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc(getCurrentServerTime) final public func getCurrentServerTime() -> Foundation.Date?
  @objc(getServerTimeForDeviceTime:) final public func getServerTime(forDeviceTime date: Foundation.Date) -> Foundation.Date?
}
@_inheritsConvenienceInitializers @objc(_SNR_PushEventFactory) public class _SNR_PushEventFactory : ObjectiveC.NSObject {
  @objc public static func makePushOpenInAppEvent(_ model: Swift.AnyObject) -> SyneriseSDK.Event?
  @objc public static func makePushClickEvent(_ model: Swift.AnyObject, parameters: [Swift.String : Any]?) -> SyneriseSDK.Event?
  @objc public static func makePushViewEvent(_ model: Swift.AnyObject) -> SyneriseSDK.Event?
  @objc public static func makePushDismissEvent(_ model: Swift.AnyObject) -> SyneriseSDK.Event?
  @objc public static func makePushImageTimeoutEvent(_ model: Swift.AnyObject) -> SyneriseSDK.Event?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRPromotions) final public class Promotions : ObjectiveC.NSObject {
  @objc(getPromotionsWithSuccess:failure:) public static func getPromotions(success: @escaping (SyneriseSDK.PromotionResponse) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getPromotionsWithApiQuery:success:failure:) public static func getPromotions(apiQuery: SyneriseSDK.PromotionsApiQuery, success: @escaping (SyneriseSDK.PromotionResponse) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getPromotionByUuid:success:failure:) public static func getPromotion(uuid: Swift.String, success: @escaping (SyneriseSDK.Promotion) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getPromotionByCode:success:failure:) public static func getPromotion(code: Swift.String, success: @escaping (SyneriseSDK.Promotion) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(activatePromotionByUuid:success:failure:) public static func activatePromotion(uuid: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(activatePromotionByCode:success:failure:) public static func activatePromotion(code: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(activatePromotionsWithIdentifiers:success:failure:) public static func activatePromotions(identifiers: [SyneriseSDK.PromotionIdentifier], success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(deactivatePromotionByUuid:success:failure:) public static func deactivatePromotion(uuid: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(deactivatePromotionByCode:success:failure:) public static func deactivatePromotion(code: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(deactivatePromotionsWithIdentifiers:success:failure:) public static func deactivatePromotions(identifiers: [SyneriseSDK.PromotionIdentifier], success: @escaping () -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getOrAssignVoucherWithPoolUUID:success:failure:) public static func getOrAssignVoucher(poolUUID: Swift.String, success: @escaping (SyneriseSDK.AssignVoucherResponse) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(assignVoucherCodeWithPoolUUID:success:failure:) public static func assignVoucherCode(poolUUID: Swift.String, success: @escaping (SyneriseSDK.AssignVoucherResponse) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getAssignedVoucherCodesWithSuccess:failure:) public static func getAssignedVoucherCodes(success: @escaping (SyneriseSDK.VoucherCodesResponse) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc deinit
}
@objc(SNRPromotionStatus) public enum PromotionStatus : Swift.UInt, Swift.RawRepresentable {
  @objc(SNRPromotionStatusNone) case none = 0
  @objc(SNRPromotionStatusActive) case active
  @objc(SNRPromotionStatusAssigned) case assigned
  @objc(SNRPromotionStatusRedeemed) case redeemed
  public static func fromString(_ string: Swift.String?) -> SyneriseSDK.PromotionStatus
  public func toString() -> Swift.String
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SNRInitializationConfig) public class InitializationConfig : ObjectiveC.NSObject {
  @objc public var initialDoNotTrack: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var requestValidationSalt: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRApplicationStartedEvent) final public class ApplicationStartedEvent : SyneriseSDK.Event {
  @objc(event) public static func event() -> SyneriseSDK.ApplicationStartedEvent
  @objc(eventWithParameters:) public static func event(with parameters: [Swift.String : Swift.String]?) -> SyneriseSDK.ApplicationStartedEvent
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRContent) final public class Content : ObjectiveC.NSObject {
  @objc(generateDocument:success:failure:) public static func generateDocument(slug: Swift.String, success: @escaping (SyneriseSDK.Document) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(generateDocumentWithApiQuery:success:failure:) public static func generateDocument(apiQuery: SyneriseSDK.DocumentApiQuery, success: @escaping (SyneriseSDK.Document) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(getRecommendationsV2:success:failure:) public static func getRecommendationsV2(options: SyneriseSDK.RecommendationOptions, success: @escaping (SyneriseSDK.RecommendationResponse) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(generateScreenView:success:failure:) public static func generateScreenView(feedSlug: Swift.String, success: @escaping (SyneriseSDK.ScreenView) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc(generateScreenViewWithApiQuery:success:failure:) public static func generateScreenView(apiQuery: SyneriseSDK.ScreenViewApiQuery, success: @escaping (SyneriseSDK.ScreenView) -> Swift.Void, failure: @escaping (SyneriseSDK.SNRApiError) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRSettings) public class Settings : ObjectiveC.NSObject {
  @objc final public let sdk: SyneriseSDK.GeneralSettings
  @objc final public let notifications: SyneriseSDK.NotificationsSettings
  @objc final public let tracker: SyneriseSDK.TrackerSettings
  @objc final public let inAppMessaging: SyneriseSDK.InAppMessagingSettings
  @objc final public let injector: SyneriseSDK.InjectorSettings
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPromotionDiscountTypeDetails) public class PromotionDiscountTypeDetails : SyneriseSDK.BaseModel {
  @objc final public let name: Swift.String
  @objc final public let outerScope: Swift.Bool
  @objc final public let requiredItemsCount: Swift.Int
  @objc final public let discountedItemsCount: Swift.Int
  @objc deinit
}
@objc(SNRVoucherCodeStatus) public enum VoucherCodeStatus : Swift.Int, Swift.RawRepresentable {
  @objc(SNRVoucherCodeStatusUnassigned) case unassigned
  @objc(SNRVoucherCodeStatusAssigned) case assigned
  @objc(SNRVoucherCodeStatusRedeemed) case redeemed
  @objc(SNRVoucherCodeStatusCanceled) case canceled
  public static func fromString(_ string: Swift.String?) -> SyneriseSDK.VoucherCodeStatus
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SNRInjectorInAppMessageDelegate) public protocol InjectorInAppMessageDelegate {
  @objc(SNR_shouldInAppMessageAppear:) optional func snr_shouldInAppMessageAppear(data: SyneriseSDK.InAppMessageData) -> Swift.Bool
  @objc(SNR_inAppMessageDidAppear:) optional func snr_inAppMessageDidAppear(data: SyneriseSDK.InAppMessageData)
  @objc(SNR_inAppMessageDidDisappear:) optional func snr_inAppMessageDidDisappear(data: SyneriseSDK.InAppMessageData)
  @objc(SNR_inAppMessageDidChangeSize:) optional func snr_inAppMessageDidChangeSize(rect: CoreFoundation.CGRect)
  @objc(SNR_inAppMessageContextIsNeeded:) optional func snr_inAppMessageContextIsNeeded(data: SyneriseSDK.InAppMessageData) -> [Swift.AnyHashable : Any]?
  @objc(SNR_inAppMessageHandledURLAction:url:) optional func snr_inAppMessageHandledAction(data: SyneriseSDK.InAppMessageData, url: Foundation.URL)
  @available(*, deprecated, message: "Use `snr_inAppMessageHandledAction(data:deepLink:)` instead.")
  @objc(SNR_inAppMessageHandledDeeplinkAction:deeplink:) optional func snr_inAppMessageHandledAction(data: SyneriseSDK.InAppMessageData, deeplink: Swift.String)
  @objc(SNR_inAppMessageHandledDeepLinkAction:deepLink:) optional func snr_inAppMessageHandledAction(data: SyneriseSDK.InAppMessageData, deepLink: Swift.String)
  @objc(SNR_inAppMessageHandledCustomAction:name:parameters:) optional func snr_inAppMessageHandledCustomAction(data: SyneriseSDK.InAppMessageData, name: Swift.String, parameters: [Swift.AnyHashable : Any])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRInjector) final public class Injector : ObjectiveC.NSObject {
  @objc deinit
  @objc(setInAppMessageDelegate:) public static func setInAppMessageDelegate(_ delegate: any SyneriseSDK.InjectorInAppMessageDelegate)
}
extension SyneriseSDK.Injector : SyneriseSDK._SNR_SignalReceivable {
  @objc final public func signalReceived(_ signal: SyneriseSDK._SNR_BaseSignal, parameters: [Swift.String : Any])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRToken) public class Token : ObjectiveC.NSObject {
  @objc final public let tokenString: Swift.String
  @objc final public let expirationDate: Foundation.Date
  @objc final public let rlm: Swift.String
  @objc final public let origin: SyneriseSDK.TokenOrigin
  @objc final public let clientId: Swift.String?
  @objc final public let customId: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRCustomEvent) open class CustomEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:action:) public init(label: Swift.String, action: Swift.String)
  @objc(initWithLabel:action:andParams:) public init(label: Swift.String, action: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithType:label:action:andParams:) public init(type: Swift.String, label: Swift.String, action: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRecommendationSeenEvent) final public class RecommendationSeenEvent : SyneriseSDK.RecommendationEvent {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:productName:productId:campaignID:campaignHash:andParams:) public init(label: Swift.String, productName: Swift.String, productId: Swift.String, campaignID: Swift.String, campaignHash: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc final public func setCategory(_ category: Swift.String)
  @objc final public func setURL(_ url: Foundation.URL)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRVoucherCodesResponse) public class VoucherCodesResponse : SyneriseSDK.BaseModel {
  @objc final public let items: [SyneriseSDK.VoucherCodesData]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRScreenViewAudienceInfo) public class ScreenViewAudienceInfo : SyneriseSDK.BaseModel {
  @objc public var segments: [Swift.String]?
  @objc public var query: Swift.String?
  @objc public var targetType: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRClientEventsApiQuery) public class ClientEventsApiQuery : ObjectiveC.NSObject {
  @objc public var actions: [Swift.String]?
  @objc public var timeFrom: Foundation.Date?
  @objc public var timeTo: Foundation.Date?
  @objc public var limit: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRPromotionItemScope) public enum PromotionItemScope : Swift.Int, Swift.RawRepresentable {
  @objc(SNRPromotionItemScopeLineItem) case lineItem
  @objc(SNRPromotionItemScopeBasket) case basket
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SNRApiRequestCompletedSignalResult : Swift.Int {
  case success = 0
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(_SNR_ApiRequestCompletedSignal) public class _SNR_ApiRequestCompletedSignal : SyneriseSDK._SNR_BaseSignal {
  @objc final public let RESULT_KEY: Swift.String
  @objc final public let HTTP_STATUS_CODE_KEY: Swift.String
  @objc public func notifyApiRequestIsCompleted(isSuccess: Swift.Bool, HTTPStatusCode: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRecommendationClickEvent) final public class RecommendationClickEvent : SyneriseSDK.RecommendationEvent {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:productName:productId:campaignID:campaignHash:andParams:) public init(label: Swift.String, productName: Swift.String, productId: Swift.String, campaignID: Swift.String, campaignHash: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc final public func setCategory(_ category: Swift.String)
  @objc final public func setURL(_ url: Foundation.URL)
  @objc deinit
}
@objc(SNRPromotionImageType) public enum PromotionImageType : Swift.Int, Swift.RawRepresentable {
  @objc(SNRPromotionImageTypeImage) case image
  @objc(SNRPromotionImageTypeThumbnail) case thumbnail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SNRPromotionDiscountModeDetails) public class PromotionDiscountModeDetails : SyneriseSDK.BaseModel {
  @objc final public let discountSteps: [SyneriseSDK.PromotionDiscountStep]
  @objc final public let discountUsageTrigger: SyneriseSDK.PromotionDiscountUsageTrigger
  @objc deinit
}
@objc(SNRRecommendationFiltersJoinerRule) public enum RecommendationFiltersJoinerRule : Swift.Int, Swift.RawRepresentable {
  @objc(SNRRecommendationFiltersJoinerRuleNone) case none = -1
  @objc(SNRRecommendationFiltersJoinerRuleAnd) case and
  @objc(SNRRecommendationFiltersJoinerRuleOr) case or
  @objc(SNRRecommendationFiltersJoinerRuleReplace) case replace
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(_SNR_Logger) public class _SNR_Logger : ObjectiveC.NSObject {
  @objc public static func setUserDebugModeEnabled(_ enabled: Swift.Bool)
  @objc public static func setFileLoggingModeEnabled(_ enabled: Swift.Bool)
  @objc public static func setExtensionModeEnabled(_ enabled: Swift.Bool)
  @objc public static func userDebug(_ message: Swift.String)
  @objc public static func userInfo(_ message: Swift.String)
  @objc public static func userWarning(_ message: Swift.String)
  @objc public static func userError(_ message: Swift.String)
  @objc public static func userFatalError(_ message: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPromotionResponseMetadata) public class PromotionResponseMetadata : SyneriseSDK.BaseModel {
  @objc final public let totalCount: Swift.Int
  @objc final public let totalPages: Swift.Int
  @objc final public let page: Swift.Int
  @objc final public let limit: Swift.Int
  @objc final public let code: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPromotionResponse) public class PromotionResponse : SyneriseSDK.BaseModel {
  @objc final public let metadata: SyneriseSDK.PromotionResponseMetadata?
  @objc final public let items: [SyneriseSDK.Promotion]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRVisitedScreenEvent) final public class VisitedScreenEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@objc(SNRViewTrackerEventViewActionType) public enum ViewTrackerEventViewActionType : Swift.Int {
  @objc(SNRViewTrackerEventViewActionTypeInteraction) case interaction
  @objc(SNRViewTrackerEventViewActionTypeVisited) case visited
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SNRViewTrackerEventViewInteraction) public enum ViewTrackerEventViewInteraction : Swift.Int {
  @objc(SNRViewTrackerEventViewInteractionClick) case click
  @objc(SNRViewTrackerEventViewInteractionSlide) case slide
  @objc(SNRViewTrackerEventViewInteractionCheck) case check
  @objc(SNRViewTrackerEventViewInteractionSelect) case select
  @objc(SNRViewTrackerEventViewInteractionTap) case tap
  @objc(SNRViewTrackerEventViewInteractionUnknown) case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public let SNRViewTrackerEventAutotrackValueOnClick: Swift.String
public let SNRViewTrackerEventAutotrackValueOnChange: Swift.String
public let SNRViewTrackerEventAutotrackValueOnSelect: Swift.String
@_hasMissingDesignatedInitializers @objc(SNRViewTrackerEvent) final public class ViewTrackerEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithActionType:label:) public init(actionType: SyneriseSDK.ViewTrackerEventViewActionType, label: Swift.String)
  @objc final public func setViewInteraction(_ viewInteraction: SyneriseSDK.ViewTrackerEventViewInteraction)
  @objc final public func setViewType(_ viewType: Swift.String)
  @objc final public func setViewID(_ viewID: Swift.String)
  @objc final public func setViewScreen(_ viewScreen: Swift.String)
  @objc final public func setViewText(_ viewText: Swift.String)
  @objc final public func setViewParameters(_ parameters: [Swift.String : Any])
  @objc final public func setAutotrackValue(_ autotrackValue: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRTrackerDeclarativeTrackingSettings) public class TrackerDeclarativeTrackingSettings : ObjectiveC.NSObject {
  @objc public var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_ClientSignInSignal) public class _SNR_ClientSignInSignal : SyneriseSDK._SNR_BaseSignal {
  @objc public func notifySignIn()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_PushRegistrationRequiredSignal) public class _SNR_PushRegistrationRequiredSignal : SyneriseSDK._SNR_BaseSignal {
  @objc public func notifyPushRegistrationIsNeeded()
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SNRClientUUIDChangeSignalState : Swift.Int {
  case before = 0
  case after
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SNRClientUUIDChangeSignalReason : Swift.Int {
  case authentication = 0
  case regeneration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(_SNR_ClientUUIDChangeSignal) public class _SNR_ClientUUIDChangeSignal : SyneriseSDK._SNR_BaseSignal {
  @objc final public let STATE_KEY: Swift.String
  @objc final public let CURRENT_UUID_KEY: Swift.String
  @objc final public let REASON_KEY: Swift.String
  @objc public func notifyUUIDChangedIsBefore(currentUUIDString: Swift.String)
  @objc public func notifyUUIDChanged(withReason reason: SyneriseSDK.SNRClientUUIDChangeSignalReason)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_ClientSignOutSignal) public class _SNR_ClientSignOutSignal : SyneriseSDK._SNR_BaseSignal {
  @objc final public let REASON_KEY: Swift.String
  @objc public func notifySignOut(withReason reason: SyneriseSDK.ClientSessionEndReason)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_DataInconsistencySignal) public class _SNR_DataInconsistencySignal : SyneriseSDK._SNR_BaseSignal {
  @objc public func notifyDataInconsistency()
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SNRSyneriseReinitializationSignalState : Swift.Int {
  case before = 0
  case after
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(_SNR_SyneriseReinitializationSignal) public class _SNR_SyneriseReinitializationSignal : SyneriseSDK._SNR_BaseSignal {
  @objc final public let STATE_KEY: Swift.String
  @objc public func notifyReinitializationIsBefore()
  @objc public func notifyReinitializationIsAfter()
  @objc override dynamic public init()
  @objc deinit
}
@objc(_SNR_SignalReceivable) public protocol _SNR_SignalReceivable {
  @objc func signalReceived(_: SyneriseSDK._SNR_BaseSignal, parameters: [Swift.String : Any])
}
@objc public enum _SNR_BaseSignalPriority : Swift.Int {
  case high
  case normal
  case low
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(_SNR_BaseSignal) public class _SNR_BaseSignal : ObjectiveC.NSObject {
  @objc public func addReceiver(_ receiver: Swift.AnyObject)
  @objc public func addReceiver(_ receiver: Swift.AnyObject, priority: SyneriseSDK._SNR_BaseSignalPriority = .normal)
  @objc public func removeReceiver(_ receiver: Swift.AnyObject)
  @objc override dynamic public init()
  @objc deinit
}
@objc(SNRScreenViewApiQuery) public class ScreenViewApiQuery : ObjectiveC.NSObject {
  @objc final public let feedSlug: Swift.String
  @objc public var productID: Swift.String?
  @objc public var params: [Swift.String : Any]?
  @objc(initWithFeedSlug:) public init(feedSlug: Swift.String)
  @objc deinit
}
@objc(SNRTrackerParams) final public class TrackerParams : ObjectiveC.NSObject {
  @objc(makeWithBuilder:) public static func make(with handler: (SyneriseSDK.TrackerParamsBuilder) -> Swift.Void) -> SyneriseSDK.TrackerParams
  @objc public init(builder: SyneriseSDK.TrackerParamsBuilder)
  final public func _toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRecommendationResponseExtrasSlot) public class RecommendationResponseExtrasSlot : SyneriseSDK.BaseModel {
  @objc final public let identifier: Swift.Int
  @objc final public let itemIDs: [Swift.String]
  @objc final public let name: Swift.String?
  @objc final public let error: [Swift.String : Any]?
  @objc deinit
}
@objc(SNRPromotionDiscountUsageTrigger) public enum PromotionDiscountUsageTrigger : Swift.Int, Swift.RawRepresentable {
  @objc(SNRPromotionDiscountUsageTriggerTransaction) case transaction
  @objc(SNRPromotionDiscountUsageTriggerRedeem) case redeem
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SNRRecommendation) public class Recommendation : SyneriseSDK.BaseModel {
  @objc final public let itemID: Swift.String
  @objc final public let attributes: [Swift.String : Any]
  @objc public func isAttributeSetForKey(_ key: Swift.String) -> Swift.Bool
  @objc public func getAttributeSetForKey(_ key: Swift.String) -> Any?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRPushCancelledEvent) final public class PushCancelledEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@objc(SNRPromotionDiscountMode) public enum PromotionDiscountMode : Swift.Int, Swift.RawRepresentable {
  @objc(SNRPromotionDiscountModeStatic) case modeStatic
  @objc(SNRPromotionDiscountModeStep) case modeStep
  public static func fromString(_ string: Swift.String?) -> SyneriseSDK.PromotionDiscountMode
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SNRPushViewedEvent) final public class PushViewedEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_ClientApplicationInfoProvider) public class _SNR_ClientApplicationInfoProvider : ObjectiveC.NSObject {
  @objc public static func applicationName() -> Swift.String?
  @objc public static func applicationType() -> Swift.String
  @objc public static func applicationVersion() -> Swift.String?
  @objc public static func build() -> Swift.String?
  @objc public static func arePushNotificationsEnabled() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRecognizeClientEvent) final public class RecognizeClientEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithEmail:customIdentify:) convenience public init(email: Swift.String?, customIdentify: Swift.String?)
  @objc(initWithEmail:customIdentify:parameters:) public init(email: Swift.String?, customIdentify: Swift.String?, parameters: [Swift.String : Any]?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRProductAddedToCartEvent) final public class ProductAddedToCartEvent : SyneriseSDK.CartEvent {
  @objc(initWithLabel:sku:finalPrice:quantity:) public init(label: Swift.String, sku: Swift.String, finalPrice: SyneriseSDK.UnitPrice, quantity: Swift.Int)
  @objc(initWithLabel:sku:finalPrice:quantity:andParams:) public init(label: Swift.String, sku: Swift.String, finalPrice: SyneriseSDK.UnitPrice, quantity: Swift.Int, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR) final public class _SNR : ObjectiveC.NSObject {
  @objc public static var _Proxy: any SyneriseSDK.SNRSwiftCommandProxyProtocol {
    @objc get
  }
  @objc public static var Logger: SyneriseSDK._SNR_Logger.Type {
    @objc get
  }
  @objc public static var SyneriseFrameworkInfoProvider: SyneriseSDK._SNR_SyneriseFrameworkInfoProvider.Type {
    @objc get
  }
  @objc public static var ClientApplicationInfoProvider: SyneriseSDK._SNR_ClientApplicationInfoProvider.Type {
    @objc get
  }
  @objc public static var DeviceInfoProvider: SyneriseSDK._SNR_DeviceInfoProvider.Type {
    @objc get
  }
  @objc public static var ImageProviderSingleton: SyneriseSDK._SNR_ImageProvider {
    @objc get
  }
  @objc public static var ImageProviderNewInstance: SyneriseSDK._SNR_ImageProvider {
    @objc get
  }
  @objc public static var ClientSignInSignalSingleton: SyneriseSDK._SNR_ClientSignInSignal {
    @objc get
  }
  @objc public static var ClientSignOutSignalSingleton: SyneriseSDK._SNR_ClientSignOutSignal {
    @objc get
  }
  @objc public static var ClientUUIDChangeSignalSingleton: SyneriseSDK._SNR_ClientUUIDChangeSignal {
    @objc get
  }
  @objc public static var DataInconsistencySignalSingleton: SyneriseSDK._SNR_DataInconsistencySignal {
    @objc get
  }
  @objc public static var PushRegistrationRequiredSignalSingleton: SyneriseSDK._SNR_PushRegistrationRequiredSignal {
    @objc get
  }
  @objc public static var SyneriseReinitializationSignalSingleton: SyneriseSDK._SNR_SyneriseReinitializationSignal {
    @objc get
  }
  @objc public static var ApiRequestCompletedSignalSingleton: SyneriseSDK._SNR_ApiRequestCompletedSignal {
    @objc get
  }
  @objc public static var DispatchUtils: SyneriseSDK._SNR_DispatchUtils.Type {
    @objc get
  }
  @objc public static var DelegateUtils: SyneriseSDK._SNR_DelegateUtils.Type {
    @objc get
  }
  @objc public static var MiscUtils: SyneriseSDK._SNR_MiscUtils.Type {
    @objc get
  }
  @objc public static var PushEventFactory: SyneriseSDK._SNR_PushEventFactory.Type {
    @objc get
  }
  @objc public static var TimeZoneDateFormatterInstance: SyneriseSDK._SNR_TimeZoneDateFormatter {
    @objc get
  }
  @objc public static var UTCDateFormatterInstance: SyneriseSDK._SNR_UTCDateFormatter {
    @objc get
  }
  @objc public static var PriceFormatterInstance: SyneriseSDK._SNR_PriceFormatter {
    @objc get
  }
  @objc public static var ClientManagerSingleton: SyneriseSDK._SNR_ClientManager {
    @objc get
  }
  @objc public static var ClientManagerNewInstance: SyneriseSDK._SNR_ClientManager {
    @objc get
  }
  @objc public static var ServerTimeManagerSingleton: SyneriseSDK._SNR_ServerTimeManager {
    @objc get
  }
  @available(iOS 13, *)
  @objc public static var BackgroundTaskManagerSingleton: SyneriseSDK._SNR_BackgroundTaskManager {
    @objc get
  }
  @objc public static var ClientModelNewInstance: SyneriseSDK._SNR_ClientModel {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRInAppMessagingSettings) public class InAppMessagingSettings : ObjectiveC.NSObject {
  @objc public var checkGlobalControlGroupsOnDefinitionsFetch: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var maxDefinitionUpdateIntervalLimit: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public var contentBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var renderingTimeout: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public var shouldSendInAppCappingEvent: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRegisteredEvent) final public class RegisteredEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRRecommendationViewEvent) final public class RecommendationViewEvent : SyneriseSDK.RecommendationEvent {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:campaignID:campaignHash:correlationId:andParams:) public init(label: Swift.String, campaignID: Swift.String, campaignHash: Swift.String, correlationId: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc(initWithLabel:items:campaignID:campaignHash:correlationId:andParams:) public init(label: Swift.String, items: [Swift.String], campaignID: Swift.String, campaignHash: Swift.String, correlationId: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc final public func setItems(_ items: [Swift.String])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SNRError) public class SNRError : Foundation.NSError, @unchecked Swift.Sendable {
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo: [Swift.String : Any]?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRCartEvent) public class CartEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc public func setName(_ name: Swift.String)
  @objc public func setCategory(_ category: Swift.String)
  @objc public func setCategories(_ categories: [Swift.String])
  @objc public func setOffline(_ isOffline: Swift.Bool)
  @objc public func setRegularPrice(_ price: SyneriseSDK.UnitPrice)
  @objc public func setDiscountedPrice(_ price: SyneriseSDK.UnitPrice)
  @objc public func setURL(_ url: Foundation.URL)
  @objc public func setProducer(_ producer: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRTrackerParamsBuilder) final public class TrackerParamsBuilder : ObjectiveC.NSObject {
  @objc final public func setObject(_ object: Any, forKey key: Swift.String)
  @objc final public func setString(_ stringValue: Swift.String, forKey key: Swift.String)
  @objc final public func setInt(_ integerValue: Swift.Int, forKey key: Swift.String)
  @objc final public func setFloat(_ floatValue: Swift.Float, forKey key: Swift.String)
  @objc final public func setDouble(_ doubleValue: Swift.Double, forKey key: Swift.String)
  @objc final public func setBool(_ boolValue: Swift.Bool, forKey key: Swift.String)
  @objc final public func _toDictionary() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_SNR_DispatchUtils) public class _SNR_DispatchUtils : ObjectiveC.NSObject {
  @objc public static func getKeychainProcessingQueue() -> Dispatch.DispatchQueue
  @discardableResult
  public static func synchronized<T>(_ lock: Swift.AnyObject, closure: () -> T) -> T
  @objc public static func dispatchSyncBlockOnMainThread(_ block: @escaping () -> Swift.Void)
  @objc public static func dispatchSyncBlockOnMainThread(_ block: @escaping () -> Swift.Void, ifMetCondition condition: Swift.Bool)
  @objc public static func dispatchSyncBlock(_ block: @escaping () -> Swift.Void, onQueue queue: Dispatch.DispatchQueue)
  @objc public static func dispatchAsyncBlockOnMainThread(_ block: @escaping () -> Swift.Void)
  @objc public static func dispatchAsyncBlockOnMainThread(_ block: @escaping () -> Swift.Void, ifMetCondition condition: Swift.Bool)
  @objc public static func dispatchAsyncBlock(_ block: @escaping () -> Swift.Void, onQueue queue: Dispatch.DispatchQueue)
  @objc public static func dispatchAsyncBlockOnMainThread(_ block: @escaping () -> Swift.Void, withDelay delay: Foundation.TimeInterval)
  @objc public static func dispatchAsyncBlockOnBackgroundThread(_ block: @escaping () -> Swift.Void)
  @objc public static func dispatchAsyncBlockOnBackgroundThread(_ block: @escaping () -> Swift.Void, ifMetCondition condition: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SNRApiErrorBody) public class SNRApiErrorBody : ObjectiveC.NSObject {
  @objc public var internalErrorCode: Swift.String?
  @objc public var error: Swift.String?
  @objc public var message: Swift.String?
  @objc public var path: Swift.String?
  @objc public var status: Swift.Int
  @objc public var errorCauses: [SyneriseSDK.SNRApiErrorCause]?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SNRHitTimerEvent) final public class HitTimerEvent : SyneriseSDK.Event {
  @objc override public init(label: Swift.String)
  @objc override public init(label: Swift.String, params: SyneriseSDK.TrackerParams?)
  @objc deinit
}
extension SyneriseSDK.TrackerAutoTrackMode : Swift.Equatable {}
extension SyneriseSDK.TrackerAutoTrackMode : Swift.Hashable {}
extension SyneriseSDK.TrackerAutoTrackMode : Swift.RawRepresentable {}
extension SyneriseSDK.PromotionIdentifierType : Swift.Equatable {}
extension SyneriseSDK.PromotionIdentifierType : Swift.Hashable {}
extension SyneriseSDK.PromotionDiscountType : Swift.Equatable {}
extension SyneriseSDK.PromotionDiscountType : Swift.Hashable {}
extension SyneriseSDK.InternalEventSource : Swift.Equatable {}
extension SyneriseSDK.InternalEventSource : Swift.Hashable {}
extension SyneriseSDK.InternalEventSource : Swift.RawRepresentable {}
extension SyneriseSDK.PromotionType : Swift.Equatable {}
extension SyneriseSDK.PromotionType : Swift.Hashable {}
extension SyneriseSDK.TokenOrigin : Swift.Equatable {}
extension SyneriseSDK.TokenOrigin : Swift.Hashable {}
extension SyneriseSDK.ClientSex : Swift.Equatable {}
extension SyneriseSDK.ClientSex : Swift.Hashable {}
extension SyneriseSDK.ClientSex : Swift.RawRepresentable {}
extension SyneriseSDK.ClientConditionalAuthStatus : Swift.Equatable {}
extension SyneriseSDK.ClientConditionalAuthStatus : Swift.Hashable {}
extension SyneriseSDK.ClientConditionalAuthStatus : Swift.RawRepresentable {}
extension SyneriseSDK.ClientModelUUIDOrigin : Swift.Equatable {}
extension SyneriseSDK.ClientModelUUIDOrigin : Swift.Hashable {}
extension SyneriseSDK.ClientModelUUIDOrigin : Swift.RawRepresentable {}
extension SyneriseSDK.SNRApiErrorType : Swift.Equatable {}
extension SyneriseSDK.SNRApiErrorType : Swift.Hashable {}
extension SyneriseSDK.SNRApiErrorType : Swift.RawRepresentable {}
extension SyneriseSDK.SNRApiErrorHttpErrorCategory : Swift.Equatable {}
extension SyneriseSDK.SNRApiErrorHttpErrorCategory : Swift.Hashable {}
extension SyneriseSDK.SNRApiErrorHttpErrorCategory : Swift.RawRepresentable {}
extension SyneriseSDK.SNRErrorCode : Swift.Equatable {}
extension SyneriseSDK.SNRErrorCode : Swift.Hashable {}
extension SyneriseSDK.SNRErrorCode : Swift.RawRepresentable {}
extension SyneriseSDK.PromotionStatus : Swift.Equatable {}
extension SyneriseSDK.PromotionStatus : Swift.Hashable {}
extension SyneriseSDK.VoucherCodeStatus : Swift.Equatable {}
extension SyneriseSDK.VoucherCodeStatus : Swift.Hashable {}
extension SyneriseSDK.PromotionItemScope : Swift.Equatable {}
extension SyneriseSDK.PromotionItemScope : Swift.Hashable {}
extension SyneriseSDK.SNRApiRequestCompletedSignalResult : Swift.Equatable {}
extension SyneriseSDK.SNRApiRequestCompletedSignalResult : Swift.Hashable {}
extension SyneriseSDK.SNRApiRequestCompletedSignalResult : Swift.RawRepresentable {}
extension SyneriseSDK.PromotionImageType : Swift.Equatable {}
extension SyneriseSDK.PromotionImageType : Swift.Hashable {}
extension SyneriseSDK.RecommendationFiltersJoinerRule : Swift.Equatable {}
extension SyneriseSDK.RecommendationFiltersJoinerRule : Swift.Hashable {}
extension SyneriseSDK.ViewTrackerEventViewActionType : Swift.Equatable {}
extension SyneriseSDK.ViewTrackerEventViewActionType : Swift.Hashable {}
extension SyneriseSDK.ViewTrackerEventViewActionType : Swift.RawRepresentable {}
extension SyneriseSDK.ViewTrackerEventViewInteraction : Swift.Equatable {}
extension SyneriseSDK.ViewTrackerEventViewInteraction : Swift.Hashable {}
extension SyneriseSDK.ViewTrackerEventViewInteraction : Swift.RawRepresentable {}
extension SyneriseSDK.SNRClientUUIDChangeSignalState : Swift.Equatable {}
extension SyneriseSDK.SNRClientUUIDChangeSignalState : Swift.Hashable {}
extension SyneriseSDK.SNRClientUUIDChangeSignalState : Swift.RawRepresentable {}
extension SyneriseSDK.SNRClientUUIDChangeSignalReason : Swift.Equatable {}
extension SyneriseSDK.SNRClientUUIDChangeSignalReason : Swift.Hashable {}
extension SyneriseSDK.SNRClientUUIDChangeSignalReason : Swift.RawRepresentable {}
extension SyneriseSDK.SNRSyneriseReinitializationSignalState : Swift.Equatable {}
extension SyneriseSDK.SNRSyneriseReinitializationSignalState : Swift.Hashable {}
extension SyneriseSDK.SNRSyneriseReinitializationSignalState : Swift.RawRepresentable {}
extension SyneriseSDK._SNR_BaseSignalPriority : Swift.Equatable {}
extension SyneriseSDK._SNR_BaseSignalPriority : Swift.Hashable {}
extension SyneriseSDK._SNR_BaseSignalPriority : Swift.RawRepresentable {}
extension SyneriseSDK.PromotionDiscountUsageTrigger : Swift.Equatable {}
extension SyneriseSDK.PromotionDiscountUsageTrigger : Swift.Hashable {}
extension SyneriseSDK.PromotionDiscountMode : Swift.Equatable {}
extension SyneriseSDK.PromotionDiscountMode : Swift.Hashable {}
